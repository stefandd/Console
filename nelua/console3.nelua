require 'vector'
require 'string'
require 'math'
require 'memory'
require 'allocators.general'
require 'raylib'
require 'winlibs' -- only needed on Windows
require 'csv'
require 'vector2if'

-- cp437 translation table, needed for the REXPaint import function in cp437_DOSLatinUS order
local cp437_to_unicode : [256]cint = {
    0x0000, --NULL
    0x263A,
    0x263B,
    0x2665,
    0x2666,
    0x2663,
    0x2660,
    0x2022,
    0x25D8,
    0x25CB,
    0x25D9,
    0x2642,
    0x2640,
    0x266A,
    0x266B,
    0x263C,
    0x25BA,
    0x25C4,
    0x2195,
    0x203C,
    0xB6  ,
    0xA7  ,
    0x25AC,
    0x21A8,
    0x2191,
    0x2193,
    0x2192,
    0x2190,
    0x221F,
    0x2194,
    0x25B2,
    0x25BC,
    0x0020, --SPACE
    0x0021, --EXCLAMATION MARK
    0x0022, --QUOTATION MARK
    0x0023, --NUMBER SIGN
    0x0024, --DOLLAR SIGN
    0x0025, --PERCENT SIGN
    0x0026, --AMPERSAND
    0x0027, --APOSTROPHE
    0x0028, --LEFT PARENTHESIS
    0x0029, --RIGHT PARENTHESIS
    0x002a, --ASTERISK
    0x002b, --PLUS SIGN
    0x002c, --COMMA
    0x002d, --HYPHEN-MINUS
    0x002e, --FULL STOP
    0x002f, --SOLIDUS
    0x0030, --DIGIT ZERO
    0x0031, --DIGIT ONE
    0x0032, --DIGIT TWO
    0x0033, --DIGIT THREE
    0x0034, --DIGIT FOUR
    0x0035, --DIGIT FIVE
    0x0036, --DIGIT SIX
    0x0037, --DIGIT SEVEN
    0x0038, --DIGIT EIGHT
    0x0039, --DIGIT NINE
    0x003a, --COLON
    0x003b, --SEMICOLON
    0x003c, --LESS-THAN SIGN
    0x003d, --EQUALS SIGN
    0x003e, --GREATER-THAN SIGN
    0x003f, --QUESTION MARK
    0x0040, --COMMERCIAL AT
    0x0041, --LATIN CAPITAL LETTER A
    0x0042, --LATIN CAPITAL LETTER B
    0x0043, --LATIN CAPITAL LETTER C
    0x0044, --LATIN CAPITAL LETTER D
    0x0045, --LATIN CAPITAL LETTER E
    0x0046, --LATIN CAPITAL LETTER F
    0x0047, --LATIN CAPITAL LETTER G
    0x0048, --LATIN CAPITAL LETTER H
    0x0049, --LATIN CAPITAL LETTER I
    0x004a, --LATIN CAPITAL LETTER J
    0x004b, --LATIN CAPITAL LETTER K
    0x004c, --LATIN CAPITAL LETTER L
    0x004d, --LATIN CAPITAL LETTER M
    0x004e, --LATIN CAPITAL LETTER N
    0x004f, --LATIN CAPITAL LETTER O
    0x0050, --LATIN CAPITAL LETTER P
    0x0051, --LATIN CAPITAL LETTER Q
    0x0052, --LATIN CAPITAL LETTER R
    0x0053, --LATIN CAPITAL LETTER S
    0x0054, --LATIN CAPITAL LETTER T
    0x0055, --LATIN CAPITAL LETTER U
    0x0056, --LATIN CAPITAL LETTER V
    0x0057, --LATIN CAPITAL LETTER W
    0x0058, --LATIN CAPITAL LETTER X
    0x0059, --LATIN CAPITAL LETTER Y
    0x005a, --LATIN CAPITAL LETTER Z
    0x005b, --LEFT SQUARE BRACKET
    0x005c, --REVERSE SOLIDUS
    0x005d, --RIGHT SQUARE BRACKET
    0x005e, --CIRCUMFLEX ACCENT
    0x005f, --LOW LINE
    0x0060, --GRAVE ACCENT
    0x0061, --LATIN SMALL LETTER A
    0x0062, --LATIN SMALL LETTER B
    0x0063, --LATIN SMALL LETTER C
    0x0064, --LATIN SMALL LETTER D
    0x0065, --LATIN SMALL LETTER E
    0x0066, --LATIN SMALL LETTER F
    0x0067, --LATIN SMALL LETTER G
    0x0068, --LATIN SMALL LETTER H
    0x0069, --LATIN SMALL LETTER I
    0x006a, --LATIN SMALL LETTER J
    0x006b, --LATIN SMALL LETTER K
    0x006c, --LATIN SMALL LETTER L
    0x006d, --LATIN SMALL LETTER M
    0x006e, --LATIN SMALL LETTER N
    0x006f, --LATIN SMALL LETTER O
    0x0070, --LATIN SMALL LETTER P
    0x0071, --LATIN SMALL LETTER Q
    0x0072, --LATIN SMALL LETTER R
    0x0073, --LATIN SMALL LETTER S
    0x0074, --LATIN SMALL LETTER T
    0x0075, --LATIN SMALL LETTER U
    0x0076, --LATIN SMALL LETTER V
    0x0077, --LATIN SMALL LETTER W
    0x0078, --LATIN SMALL LETTER X
    0x0079, --LATIN SMALL LETTER Y
    0x007a, --LATIN SMALL LETTER Z
    0x007b, --LEFT CURLY BRACKET
    0x007c, --VERTICAL LINE
    0x007d, --RIGHT CURLY BRACKET
    0x007e, --TILDE
    0x007f, --DELETE
    0x00c7, --LATIN CAPITAL LETTER C WITH CEDILLA
    0x00fc, --LATIN SMALL LETTER U WITH DIAERESIS
    0x00e9, --LATIN SMALL LETTER E WITH ACUTE
    0x00e2, --LATIN SMALL LETTER A WITH CIRCUMFLEX
    0x00e4, --LATIN SMALL LETTER A WITH DIAERESIS
    0x00e0, --LATIN SMALL LETTER A WITH GRAVE
    0x00e5, --LATIN SMALL LETTER A WITH RING ABOVE
    0x00e7, --LATIN SMALL LETTER C WITH CEDILLA
    0x00ea, --LATIN SMALL LETTER E WITH CIRCUMFLEX
    0x00eb, --LATIN SMALL LETTER E WITH DIAERESIS
    0x00e8, --LATIN SMALL LETTER E WITH GRAVE
    0x00ef, --LATIN SMALL LETTER I WITH DIAERESIS
    0x00ee, --LATIN SMALL LETTER I WITH CIRCUMFLEX
    0x00ec, --LATIN SMALL LETTER I WITH GRAVE
    0x00c4, --LATIN CAPITAL LETTER A WITH DIAERESIS
    0x00c5, --LATIN CAPITAL LETTER A WITH RING ABOVE
    0x00c9, --LATIN CAPITAL LETTER E WITH ACUTE
    0x00e6, --LATIN SMALL LIGATURE AE
    0x00c6, --LATIN CAPITAL LIGATURE AE
    0x00f4, --LATIN SMALL LETTER O WITH CIRCUMFLEX
    0x00f6, --LATIN SMALL LETTER O WITH DIAERESIS
    0x00f2, --LATIN SMALL LETTER O WITH GRAVE
    0x00fb, --LATIN SMALL LETTER U WITH CIRCUMFLEX
    0x00f9, --LATIN SMALL LETTER U WITH GRAVE
    0x00ff, --LATIN SMALL LETTER Y WITH DIAERESIS
    0x00d6, --LATIN CAPITAL LETTER O WITH DIAERESIS
    0x00dc, --LATIN CAPITAL LETTER U WITH DIAERESIS
    0x00a2, --CENT SIGN
    0x00a3, --POUND SIGN
    0x00a5, --YEN SIGN
    0x20a7, --PESETA SIGN
    0x0192, --LATIN SMALL LETTER F WITH HOOK
    0x00e1, --LATIN SMALL LETTER A WITH ACUTE
    0x00ed, --LATIN SMALL LETTER I WITH ACUTE
    0x00f3, --LATIN SMALL LETTER O WITH ACUTE
    0x00fa, --LATIN SMALL LETTER U WITH ACUTE
    0x00f1, --LATIN SMALL LETTER N WITH TILDE
    0x00d1, --LATIN CAPITAL LETTER N WITH TILDE
    0x00aa, --FEMININE ORDINAL INDICATOR
    0x00ba, --MASCULINE ORDINAL INDICATOR
    0x00bf, --INVERTED QUESTION MARK
    0x2310, --REVERSED NOT SIGN
    0x00ac, --NOT SIGN
    0x00bd, --VULGAR FRACTION ONE HALF
    0x00bc, --VULGAR FRACTION ONE QUARTER
    0x00a1, --INVERTED EXCLAMATION MARK
    0x00ab, --LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
    0x00bb, --RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK
    0x2591, --LIGHT SHADE
    0x2592, --MEDIUM SHADE
    0x2593, --DARK SHADE
    0x2502, --BOX DRAWINGS LIGHT VERTICAL
    0x2524, --BOX DRAWINGS LIGHT VERTICAL AND LEFT
    0x2561, --BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE
    0x2562, --BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE
    0x2556, --BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE
    0x2555, --BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE
    0x2563, --BOX DRAWINGS DOUBLE VERTICAL AND LEFT
    0x2551, --BOX DRAWINGS DOUBLE VERTICAL
    0x2557, --BOX DRAWINGS DOUBLE DOWN AND LEFT
    0x255d, --BOX DRAWINGS DOUBLE UP AND LEFT
    0x255c, --BOX DRAWINGS UP DOUBLE AND LEFT SINGLE
    0x255b, --BOX DRAWINGS UP SINGLE AND LEFT DOUBLE
    0x2510, --BOX DRAWINGS LIGHT DOWN AND LEFT
    0x2514, --BOX DRAWINGS LIGHT UP AND RIGHT
    0x2534, --BOX DRAWINGS LIGHT UP AND HORIZONTAL
    0x252c, --BOX DRAWINGS LIGHT DOWN AND HORIZONTAL
    0x251c, --BOX DRAWINGS LIGHT VERTICAL AND RIGHT
    0x2500, --BOX DRAWINGS LIGHT HORIZONTAL
    0x253c, --BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL
    0x255e, --BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE
    0x255f, --BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE
    0x255a, --BOX DRAWINGS DOUBLE UP AND RIGHT
    0x2554, --BOX DRAWINGS DOUBLE DOWN AND RIGHT
    0x2569, --BOX DRAWINGS DOUBLE UP AND HORIZONTAL
    0x2566, --BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL
    0x2560, --BOX DRAWINGS DOUBLE VERTICAL AND RIGHT
    0x2550, --BOX DRAWINGS DOUBLE HORIZONTAL
    0x256c, --BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL
    0x2567, --BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE
    0x2568, --BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE
    0x2564, --BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE
    0x2565, --BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE
    0x2559, --BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE
    0x2558, --BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE
    0x2552, --BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE
    0x2553, --BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE
    0x256b, --BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE
    0x256a, --BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE
    0x2518, --BOX DRAWINGS LIGHT UP AND LEFT
    0x250c, --BOX DRAWINGS LIGHT DOWN AND RIGHT
    0x2588, --FULL BLOCK
    0x2584, --LOWER HALF BLOCK
    0x258c, --LEFT HALF BLOCK
    0x2590, --RIGHT HALF BLOCK
    0x2580, --UPPER HALF BLOCK
    0x03b1, --GREEK SMALL LETTER ALPHA
    0x00df, --LATIN SMALL LETTER SHARP S
    0x0393, --GREEK CAPITAL LETTER GAMMA
    0x03c0, --GREEK SMALL LETTER PI
    0x03a3, --GREEK CAPITAL LETTER SIGMA
    0x03c3, --GREEK SMALL LETTER SIGMA
    0x00b5, --MICRO SIGN
    0x03c4, --GREEK SMALL LETTER TAU
    0x03a6, --GREEK CAPITAL LETTER PHI
    0x0398, --GREEK CAPITAL LETTER THETA
    0x03a9, --GREEK CAPITAL LETTER OMEGA
    0x03b4, --GREEK SMALL LETTER DELTA
    0x221e, --INFINITY
    0x03c6, --GREEK SMALL LETTER PHI
    0x03b5, --GREEK SMALL LETTER EPSILON
    0x2229, --INTERSECTION
    0x2261, --IDENTICAL TO
    0x00b1, --PLUS-MINUS SIGN
    0x2265, --GREATER-THAN OR EQUAL TO
    0x2264, --LESS-THAN OR EQUAL TO
    0x2320, --TOP HALF INTEGRAL
    0x2321, --BOTTOM HALF INTEGRAL
    0x00f7, --DIVISION SIGN
    0x2248, --ALMOST EQUAL TO
    0x00b0, --DEGREE SIGN
    0x2219, --BULLET OPERATOR
    0x00b7, --MIDDLE DOT
    0x221a, --SQUARE ROOT
    0x207f, --SUPERSCRIPT LATIN SMALL LETTER N
    0x00b2, --SUPERSCRIPT TWO
    0x25a0, --BLACK SQUARE
    0x00a0, --NO-BREAK SPACE
}

----------------

local function uint32_2_Color(col: uint32): Color
    local r:uint32 = (col >> 16) & 0xFF
    local g:uint32 = (col >> 8) & 0xFF
    local b:uint32 = col & 0xFF
    return Color{(@cuchar)(r), (@cuchar)(g), (@cuchar)(b), 0xFF}
end

local function Color_2_uint32(col: Color): uint32
    return ((@uint32)(col.r) << 16) + ((@uint32)(col.g) << 8) + (@uint32)(col.b)
end

----------------

local function ToUTF8(u: cint): [7]cchar <inline>
    local buf: [7]cchar
    local idx: cint = 0
    for i: cint = 0, < 6 do                               -- 6 possible encodings: http://en.wikipedia.org/wiki/UTF-8
        local maxbits: cint = 6 + i * 5                   -- max bits this encoding can represent
        if i == 0 then maxbits = maxbits + 1 end
        if u < (1 << maxbits) then  -- does it fit?
            local remainbits: cint = i * 6 -- remaining bits not encoded in the first byte, store 6 each
            buf[idx] = (@cchar)( (@cint)(0xFF) & (((@cint)(0xFE) << (maxbits - remainbits)) + (u >> remainbits)) ) -- first byte
            idx = idx + 1
            for j: cint = i-1, >= 0, -1 do
                buf[idx] = (@cchar)(((u >> (j * 6)) & 0x3F) | 0x80) -- other bytes
                idx = idx + 1
            end
            buf[idx] = 0 -- terminate it
            return buf -- (idx + 1)   -- len
        end
    end
    assert(0) -- impossible to arrive here
    return buf
end

----------------

local function clamp(x: number, min: number, max: number): number
  return math.max(min, math.min(max, x))
end

----------------

--[[ https://discord.com/channels/680417078959800322/680417079542939713/762064514978938920

the GC scans for any record that has a pointer, the console record has Font which is a struct that has a pointer, so it decides to scan the whole console memory every collection cycle, this means if you declare a huge array inside console, it scans it, obviously this is dumb due to the simple algorithm that the GC has
the console record with arrays inside have 18248 bytes, this means the GC will iterare 18248/8=2281 iterations to complete a scan on it

StefanDD10/03/2020
Very helpful, thanks!

edubart10/03/2020
the GC scans when you allocate something, I see 2 places in the code causes this:
string.char(self.text_rbuffer[idx])  and string.format("FPS: %d", frames)
you cold redo both to not use string class so it does not need to allocate
like print('FPS', frames)
and
local buf: [2]cchar = {self.text_rbuffer[idx], 0}
            Raylib.DrawTextEx(font, &buf[0], {col_pix, row_pix}, fontsize_x, 0, self.text_c1buffer[idx])
doing this no allocation is triggered and the FPS is even higher
caring about each allocation matters when you are looking for performance
]] --

---------------- records

local font: Font
local render_tx: RenderTexture2D
local shader: Shader
local t_now: float64
local timeLoc: cint
local buffsize: integer <comptime> = 3200 
local text_rbuffer: [buffsize]cint
local text_c1buffer: [buffsize]uint32
local text_c2buffer: [buffsize]uint32

global console = @record {
    inited: boolean,
    running: boolean,
    fontsize_y: integer,
    fontsize_x: integer,
    lineheight: integer,
    num_cells_x: integer,
    num_cells_y: integer,
    border_cells_x: integer,
    border_cells_y: integer,
    window_x: integer,
    window_y: integer,
    screen_x: integer,
    screen_y: integer,
    scale: Vector2i,
    border_color: Color,
    border_show: boolean,
    text_color: Color,
    background_color: Color,
    tab_num_spaces: integer,
    ulc_buffer_idx: integer,
    ulc_px: Vector2i,
    viewport: Vector2i
}

global region = @record {
    text_rbuffer: vector(cint, GeneralAllocator),
    text_c1buffer: vector(uint32, GeneralAllocator),
    text_c2buffer: vector(uint32, GeneralAllocator),
    blitlevel: integer,
    alpha_color: cint,
    extend: Vector2i,
    pos: Vector2i,
    id: integer    
}

global sprite = @record {
    text_rbuffer: vector(cint, GeneralAllocator),
    text_c1buffer: vector(uint32, GeneralAllocator),
    text_c2buffer: vector(uint32, GeneralAllocator),
    chr_vecs: vector(Vector2i, GeneralAllocator),
    blitlevel: integer,
    extend : Vector2i,
    pos: Vector2i,
    id: integer
}
   
---------------- methods

local rpfile_buffer: *vector(csvfile) = gc_allocator:new(@vector(csvfile))
local rpfilename_buffer: *vector(string) = gc_allocator:new(@vector(string))

function region:copy(): *region
    local scopy: *region = general_allocator:new(@region)
    scopy.text_rbuffer = self.text_rbuffer:copy()
    scopy.text_c1buffer = self.text_c1buffer:copy()
    scopy.text_c2buffer = self.text_c2buffer:copy()
    scopy.blitlevel = self.blitlevel
    scopy.alpha_color = self.alpha_color
    scopy.extend = self.extend
    scopy.pos = self.pos
    scopy.id = self.id
    return scopy
end

function region:scaledcopy(tgt_extend: Vector2i): *region
    local scopy: *region = general_allocator:new(@region)
    if tgt_extend.x < 2 or tgt_extend.y < 2 then
        print "Error: illegal operands to scaledcopy!"
        return scopy -- returns empty region
    end
    local extend_x = (@number)(self.extend.x)
    local extend_y = (@number)(self.extend.y)
    local t2s_sc_x: number = extend_x / tgt_extend.x -- target-to-source (inverse) scaling factor
    local t2s_sc_y: number = extend_y / tgt_extend.y
    for i = 0, < tgt_extend.y do
        for j = 0, < tgt_extend.x do
            local src_idx = (@integer)(clamp(math.floor(t2s_sc_y * i + 0.5) * extend_x + math.floor(t2s_sc_x * j + 0.5), 0, #self.text_rbuffer - 1))
            scopy.text_rbuffer:push(self.text_rbuffer[src_idx])
            scopy.text_c1buffer:push(self.text_c1buffer[src_idx])
            scopy.text_c2buffer:push(self.text_c2buffer[src_idx])
        end
    end
    assert(#scopy.text_rbuffer == tgt_extend.x * tgt_extend.y)
    scopy.blitlevel = self.blitlevel
    scopy.alpha_color = self.alpha_color
    scopy.extend = tgt_extend
    scopy.pos = self.pos
    scopy.id = self.id
    return scopy
end

-- interface to regions and sprites (blit, retrieve screen regions)
function region:blit(c: *console)
    -- TODO rewrite with Vector2i ?
    local col, row = self.pos.x - c.viewport.x, self.pos.y - c.viewport.y
    local extend_x, extend_y = self.extend.x, self.extend.y
    local portion_x, portion_y = extend_x, extend_y -- this will hold the rectangular effective blit area
    local offset_x, offset_y = 0, 0 -- offset coordinates in the region
    local num_cells_x, num_cells_y = c.num_cells_x, c.num_cells_y
    -- determine the section of the region which will get blitted to the viewport
    if col + portion_x > num_cells_x then
        portion_x = num_cells_x - col
    elseif col < 0 then
        portion_x = portion_x + col
        offset_x = -col
        col = 0
    end
    if row + portion_y > num_cells_y then
        portion_y = num_cells_y - row
    elseif row < 0 then
        portion_y = portion_y + row
        offset_y = -row
        row = 0
    end
    --print "Debug: adjusted row, col: " .. col .. ", " .. row
    --print "Debug: region offsets: " .. offset_y .. ", " .. offset_x
    --print "Debug: region portions: " .. portion_y .. ", " .. portion_x
    if self.blitlevel == 2 then
        for i = 0, < portion_y do
            for j = 0, < portion_x do
                local src_idx = (offset_y + i) * extend_x + offset_x + j
                local curr_chr = self.text_rbuffer[src_idx]
                local backcolor = self.text_c2buffer[src_idx]
                if curr_chr ~= 0x20 or backcolor ~= self.alpha_color then
                    local tgt_idx = c.ulc_buffer_idx + (col + j) + num_cells_x * (row + i)
                    --print "Debug indices: src: " + src_idx + ", tgt: " + tgt_idx
                    text_rbuffer[tgt_idx] = curr_chr
                    text_c1buffer[tgt_idx] = self.text_c1buffer[src_idx]
                    text_c2buffer[tgt_idx] = backcolor
                end
            end
        end
    elseif self.blitlevel == 1 then
        for i = 0, < portion_y do
            for j = 0, < portion_x do
                local src_idx = (offset_y + i) * extend_x + offset_x + j
                local curr_chr = self.text_rbuffer[src_idx]
                if curr_chr ~= 0x20 then
                    local tgt_idx = c.ulc_buffer_idx + (col + j) + num_cells_x * (row + i)
                    text_rbuffer[tgt_idx] = curr_chr
                    text_c1buffer[tgt_idx] = self.text_c1buffer[src_idx]
                end
            end
        end
    elseif self.blitlevel == 0 then
        for i = 0, < portion_y do
            for j = 0, < portion_x do
                local curr_chr = self.text_rbuffer[(offset_y + i) * extend_x + offset_x + j]
                if curr_chr ~= 0x20 then
                    text_rbuffer[c.ulc_buffer_idx + (col + j) + num_cells_x * (row + i)] = curr_chr
                end
            end
        end
    end
end

function region:destroy()
    self.text_rbuffer:destroy()
    self.text_c1buffer:destroy()
    self.text_c2buffer:destroy() 
end

function region:fromREXPaint(REXPaint_csv: string, alpha_color: Color)
    self.text_rbuffer:clear()
    self.text_c1buffer:clear()
    self.text_c2buffer:clear()
    self.alpha_color = Color_2_uint32(alpha_color)
    local col_min, col_max = 99999999, -1
    local row_min, row_max = 99999999, -1
    local rpfcontent: *sequence(sequence(string))
    local rpffoundincache: boolean = false
    local c: *csvfile
    
    -- Caching leads to SEGFaults

    -- check if csv file exists in cache
    for i = 0, < #rpfilename_buffer do
        if rpfilename_buffer[i] == REXPaint_csv then
            rpfcontent = &(rpfile_buffer[i].content)
            rpffoundincache = true
            break
        end
    end
    -- if it does not exist, we open it and put the content into cache
    if not rpffoundincache then
        c = gc_allocator:new(@csvfile) --c = general_allocator:new(@csvfile)
        c:read(REXPaint_csv, 1)
        rpfcontent = &c.content
        rpfile_buffer:push(c)
        rpfilename_buffer:push(REXPaint_csv)
    end
    -- parse the RexPaint data
    if #rpfcontent > 0 then
        --print("Processing file " .. REXPaint_csv)
        -- 1st pass: find bounding box
        for i, v in pairs(rpfcontent) do        
            if #v == 5 then
                local x, y, chr = tointeger(v[1]), tointeger(v[2]), tointeger(v[3])
                local chbgcol = 1 * ("0x" .. v[5]:sub(2, -1))
                -- determine bounding box
                if chr ~= 0x20 or chbgcol ~= self.alpha_color then
                --if chr ~= 0x20 then
                    if x < col_min then col_min = x end
                    if x > col_max then col_max = x end
                    if y < row_min then row_min = y end
                    if y > row_max then row_max = y end
                    --print("Chr: " .. i, chr, chbgcol, self.alpha_color)
                end
            else
                print("Error parsing file " .. REXPaint_csv .. ", line " .. i)
            end
        end
        -- 2nd pass: capture region in bounding box
        for i, v in pairs(rpfcontent) do
            local x, y, chr = tointeger(v[1]), tointeger(v[2]), tointeger(v[3])
            if x >= col_min and x <= col_max and y >= row_min and y <= row_max then -- inside bounding box
                -- convert html color strings to uint32
                local chfgcol = 1 * ("0x" .. v[4]:sub(2, -1))
                local chbgcol = 1 * ("0x" .. v[5]:sub(2, -1))
                self.text_rbuffer:push(cp437_to_unicode[chr])
                self.text_c1buffer:push(chfgcol)
                self.text_c2buffer:push(chbgcol)
                --local tmp1: Color = uint32_2_Color(chfgcol)
                --print (x, y, cp437_to_unicode[chr], chfgcol, chbgcol, "   ", tmp1.r, tmp1.g, tmp1.b)
            end        
        end
        self.blitlevel = 2 -- default
        self.extend = Vector2i{col_max - col_min + 1, row_max - row_min + 1}
        self.pos = Vector2i{0, 0}
        assert(#self.text_rbuffer == self.extend.x * self.extend.y, "Error processing REXPAINT -- dimension mismatch")
        --lastregion = self:copy()
        --general_allocator:delete(c)
    else
        print ("Error opening " .. REXPaint_csv)
    end
end

function sprite:fromregion(r: *region)
    self.text_rbuffer:clear()
    self.text_c1buffer:clear()
    self.text_c2buffer:clear()
    self.chr_vecs:clear()
    self.blitlevel = r.blitlevel
    self.extend = r.extend
    self.pos = r.pos
    for i = 0, < r.extend.y do
        for j = 0, < r.extend.x do
            local src_idx = i * r.extend.x + j
            local curr_chr = r.text_rbuffer[src_idx]
            local backcolor = r.text_c2buffer[src_idx]
            if curr_chr ~= 0x20 or backcolor ~= r.alpha_color then
                self.chr_vecs:push(Vector2i{j, i})
                self.text_rbuffer:push(curr_chr)
                self.text_c1buffer:push(r.text_c1buffer[src_idx])
                self.text_c2buffer:push(backcolor)
            end
        end
    end
end

function sprite:fromREXPaint(REXPaint_csv: string, alpha_color: Color)
    local r: *region = general_allocator:new(@region)
    r:fromREXPaint(REXPaint_csv, alpha_color)
    self:fromregion(r)
    r:destroy()
    general_allocator:delete(r)
end

function sprite:copy(): *sprite
    local scopy: *sprite = general_allocator:new(@sprite)
    scopy.text_rbuffer = self.text_rbuffer:copy()
    scopy.text_c1buffer = self.text_c1buffer:copy()
    scopy.text_c2buffer = self.text_c2buffer:copy()
    scopy.chr_vecs = self.chr_vecs:copy()
    scopy.blitlevel = self.blitlevel
    scopy.extend = self.extend
    scopy.pos = self.pos
    scopy.id = self.id
    return scopy
end

function sprite:blit(c: *console)
    local ulc = c.viewport
    local lrc = ulc + Vector2i{c.num_cells_x - 1, c.num_cells_y - 1}
    local chrs = &self.chr_vecs
    if self.blitlevel == 2 then
        for i = 0, < #chrs do
            local chr_pos = chrs[i] + self.pos
            local chr_pos_in_c = chr_pos - ulc
            if chr_pos_in_c * (lrc - chr_pos) >= 0 then
                local tgt_idx = chr_pos_in_c.x + c.num_cells_x * chr_pos_in_c.y
                text_rbuffer[tgt_idx] = self.text_rbuffer[i]
                text_c1buffer[tgt_idx] = self.text_c1buffer[i]
                text_c2buffer[tgt_idx] = self.text_c2buffer[i]
            end
        end
    elseif self.blitlevel == 1 then
        for i = 0, < #chrs do
            local chr_pos = chrs[i] + self.pos
            local chr_pos_in_c = chr_pos - ulc
            if chr_pos_in_c * (lrc - chr_pos) >= 0 then
                local tgt_idx = chr_pos_in_c.x + c.num_cells_x * chr_pos_in_c.y
                text_rbuffer[tgt_idx] = self.text_rbuffer[i]
                text_c1buffer[tgt_idx] = self.text_c1buffer[i]
            end
        end
    elseif self.blitlevel == 0 then
        for i = 0, < #chrs do
            local chr_pos = chrs[i] + self.pos
            local chr_pos_in_c = chr_pos - ulc
            if chr_pos_in_c * (lrc - chr_pos) >= 0 then
                text_rbuffer[chr_pos_in_c.x + c.num_cells_x * chr_pos_in_c.y] = self.text_rbuffer[i]
            end
        end
    end
end

function sprite:collisiontest(s: *sprite, detailed: boolean): boolean
    -- 1st -- bounding box overlap test, and only if overlap in bounding box then proceed
    -- with the detailed character collision test --> gains ~20% performance in collisiontest
    local extmax = Vector2i_max(self.extend, s.extend)
    local dist_vec = s.pos - self.pos
    -- test both the vector joining the upper left corners and the vector joining the lower right corners to be shorter than the maximum of the extends in each dimension.
    if (Vector2i_abs(dist_vec) < extmax) and (Vector2i_abs(dist_vec + s.extend - self.extend) < extmax) then
        if detailed then
            -- 2nd -- detailed test collisions in the character coordinate vectors, only performed if the bounding boxes collided
            local s_chr_vecs = s.chr_vecs
            for j = 0, < #s_chr_vecs do -- loop over the other sprite's chars
                local testpos = dist_vec + s_chr_vecs[j]
                for i = 0, < #self.chr_vecs do -- loop over our chars
                    if self.chr_vecs[i] == testpos then
                        return true
                    end
                end
            end
        else
            return true
        end
    end
    return false
end

function sprite:destroy()
    self.text_rbuffer:destroy()
    self.text_c1buffer:destroy()
    self.text_c2buffer:destroy() 
    self.chr_vecs:destroy()
end

function console:default()
    self.inited = false
    self.fontsize_y = 16
    self.fontsize_x = 16
    self.lineheight = 16
    self.num_cells_x = 40
    self.num_cells_y = 25
    self.border_cells_x = 3
    self.border_cells_y = 2
    self.border_color = Color{50, 50, 50, 255}
    self.border_show = true
    self.ulc_px = {0, 0}
    self.viewport = {0, 0}
    self.text_color = Color{0, 0, 0, 255}
    self.background_color = Color{80, 80, 80, 255}
    self.tab_num_spaces = 4
    self.ulc_buffer_idx = 0    
end

function console:init(wd_title: string, font_fname: string) -- , font_max_char: integer)
    if not self.inited then
        self:default()
    end
    if self.border_show then
        self.screen_x = (self.num_cells_x + 2 * self.border_cells_x) * self.fontsize_x
        self.screen_y = (self.num_cells_y + 2 * self.border_cells_y) * self.fontsize_y
        self.ulc_px = {self.border_cells_x * self.fontsize_x, self.border_cells_y * self.fontsize_y}
    else
        self.screen_x = self.num_cells_x * self.fontsize_x
        self.screen_y = self.num_cells_y * self.fontsize_y
        self.ulc_px = {0, 0}
    end
    Raylib.SetConfigFlags(ConfigFlag.FLAG_WINDOW_RESIZABLE)
    Raylib.InitWindow(self.screen_x, self.screen_y, wd_title)
    --Raylib.SetTargetFPS(60) -- Set our game to run at 60 frames-per-second
    -- NOTE: Textures MUST be loaded after Window initialization (OpenGL context is required)
    render_tx = Raylib.LoadRenderTexture(self.screen_x, self.screen_y)
    font = Raylib.LoadFont(font_fname)
    --font = Raylib.LoadFontEx(font_fname, self.fontsize_y, nilptr, font_max_char)
    shader = Raylib.LoadShader(nilptr, "crt.fs")
    --timeLoc = Raylib.GetShaderLocation(shader, "time")
end

function console:randomize()
    local idx: integer = 0
    local rndfunc = math.random -- Raylib.GetRandomValue
    for j = 0, < self.num_cells_y do -- loop over rows
        for i = 0, < self.num_cells_x do -- loop over cols
            text_rbuffer[idx] = 32 + rndfunc(0, 90)
            text_c1buffer[idx] = (rndfunc(0, 255) << 16) + (rndfunc(0, 255) << 8) + rndfunc(0, 255)
            text_c2buffer[idx] = (rndfunc(0, 255) << 16) + (rndfunc(0, 255) << 8) + rndfunc(0, 255)
            idx = idx + 1
        end
    end
end

function console:clr() <inline>
    local clearsize = self.num_cells_x * self.num_cells_y
    memory.zero(&text_rbuffer[0], clearsize * 4)
    --memory.zero(&text_c1buffer[0], buffsize * 4)
    --memory.zero(&text_c2buffer[0], buffsize * 4)
    for i = 0, < clearsize do
        text_c1buffer[i] = Color_2_uint32(self.text_color)
        text_c2buffer[i] = Color_2_uint32(self.background_color)
    end
end

function console:textdraw() <inline>
    local fontsize_x, fontsize_y = self.fontsize_x, self.fontsize_y
    local col_pix: integer = 0
    local row_pix: integer = (self.border_show and 1 or 0) * self.ulc_px.y
    local idx: integer = 0
    local buflen: cint = 0
    local space_chr: cint = 0x20
    local ulc_x_px = self.ulc_px.x
    for j = 0, < self.num_cells_y do -- loop over rows
        col_pix = (self.border_show and 1 or 0) * ulc_x_px
        for i = 0, < self.num_cells_x do -- loop over cols
            -- background
            Raylib.DrawRectangle(col_pix, row_pix, fontsize_x, fontsize_y, uint32_2_Color(text_c2buffer[idx]))
            local chr = text_rbuffer[idx]
            if chr ~= space_chr then
                -- v1 -- problem here is that the character is not aligned in the cell properly (would have to adjust the pos vector)
                --Raylib.DrawTextCodepoint(font, text_rbuffer[idx], {col_pix, row_pix}, 1.0, text_c1buffer[idx])
                -- v2 -- using conversion of the code point to a string
                local buf: *[0]cchar = Raylib.CodepointToUtf8(chr, &buflen)
                --buf[buflen] = 0 -- trim the string constant which is static in the raylib text module to the length of the current char
                Raylib.DrawTextEx(font, buf, {col_pix, row_pix}, fontsize_x, 0, uint32_2_Color(text_c1buffer[idx]))
                -- v3 -- using Lobster's conversion routine = same speed
                --local buf = ToUTF8(chr)
                --Raylib.DrawTextEx(font, &buf[0], {col_pix, row_pix}, fontsize_x, 0, text_c1buffer[idx])
            end
            idx = idx + 1
            col_pix = col_pix + fontsize_x
        end
        row_pix = row_pix + fontsize_y
    end
end

function console:draw() <inline>
    local insertpos = Vector2{0, 0}
    local srcrect = Rectangle{0, 0, self.screen_x, -self.screen_y}
    local dstrect = Rectangle{0, 0, Raylib.GetScreenWidth(), Raylib.GetScreenHeight()}
    t_now = t_now + Raylib.GetFrameTime()
    -- render the current state
    Raylib.BeginTextureMode(render_tx)
        if self.border_show then Raylib.ClearBackground(self.border_color) end
        self:textdraw()
    Raylib.EndTextureMode()
    Raylib.BeginShaderMode(shader)
        --Raylib.SetShaderValue(shader, timeLoc, &t_now, 0)
        Raylib.ClearBackground(BLACK)
        Raylib.DrawTexturePro(render_tx.texture, srcrect, dstrect, insertpos, 0, BLACK) -- -screen_height to flip the texture back to right side up
    Raylib.EndShaderMode()    
end

function console:run(body: function():boolean)
    local t_last: float64 = Raylib.GetTime()
    local frames: integer = 0
    local keep_running: boolean = true
    while keep_running and not Raylib.WindowShouldClose() do -- Detect window close button or ESC key
        frames = frames + 1
        -- run the game code 
        if body ~= nilptr then
            keep_running = body()
        end
        Raylib.BeginDrawing()
            self:draw()
            --Raylib.DrawFPS(0, 0)
        Raylib.EndDrawing()
        --
        t_now = Raylib.GetTime()
        if t_now - t_last > 1.0 then
            print("FPS: ", frames)
            t_last = t_now
            frames = 0
        end
        --
    end
    Raylib.UnloadFont(font)
    Raylib.UnloadRenderTexture(render_tx)
    Raylib.CloseWindow() -- Close window and OpenGL context
end

function console:cleanup()
    gc_allocator:delete(rpfile_buffer)
    gc_allocator:delete(rpfilename_buffer)
end
